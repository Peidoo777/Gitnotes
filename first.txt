版本控制软件
版本控制软件是一个用来记录文件变化，以便将来查阅特定版本修订情况的系统，因此有时也叫做“版本控制系统”
把手工管理文件版本的方式，改为由软件管理文件的版本；这个负责管理文件版本的软件，叫做“版本控制软件”

本地版本控制系统    单机运行，使维护文件版本的操作工具化
集中化的版本控制系统    联网运行，支持多人协作开发；性能差、用户体验不好 典型代表：svn

分布式版本控制系统 典型代表：Git
特点：基于服务器、客户端的运行模式
服务器保存文件的所有更新版本
客户端是服务器的完整备份，并不是只保留文件的最新版本

优点：
联网运行，支持多人协作开发
客户端断网后支持离线本地提交版本更新
服务器故障或损坏后，可使用任何一个客户端的备份进行恢复

Git 是一个开源的分布式版本控制系统，是目前世界上最先进、最流行的版本控制系统。可以快速高效地处理从很小到非常大的项目版本管理。
特点：项目越大越复杂，协同开发者越多，越能体现出 Git 的高性能和高可用性！

Git 之所以快速和高效，主要依赖于它的如下两个特性：
直接记录快照，而非差异比较
近乎所有操作都是本地执行

传统的版本控制系统（例如 SVN）是基于差异的版本控制，它们存储的是一组基本文件和每个文件随时间逐步累积的差异。
好处：节省磁盘空间
缺点：耗时、效率低
            在每次切换版本的时候，都需要在基本文件的基础上，应用每个差异，从而生成目标版本对应的文件

Git 快照是在原有文件版本的基础上重新生成一份新的文件，类似于备份。为了效率，如果文件没有修改，Git 不再重新存储该文件，而是只保留一个链接指向之前存储的文件。
缺点：占用磁盘空间较大
优点：版本切换时非常快，因为每个版本都是完整的文件快照，切换版本时直接恢复目标版本的快照即可。
特点：空间换时间

在 Git 中的绝大多数操作都只需要访问本地文件和资源，一般不需要来自网络上其它计算机的信息。
特性：
断网后依旧可以在本地对项目进行版本管理
联网后，把本地修改的记录同步到云端服务器即可

使用 Git 管理的项目，拥有三个区域，分别是工作区、暂存区、Git 仓库。
工作区  处理工作的区域
暂存区  已完成的工作的临时存放区域，等待被提交
Git 仓库    最终的存放区域

Git 中的三种状态
已修改 modified 表示修改了文件，但还没将修改的结果放到暂存区
已暂存 staged 表示对已修改文件的当前版本做了标记，使之包含在下次提交的列表中
已提交 committed   表示文件已经安全地保存在本地的 Git 仓库中

注意：
工作区的文件被修改了，但还没有放到暂存区，就是已修改状态。
如果文件已修改并放入暂存区，就属于已暂存状态。 
如果 Git 仓库中保存着特定版本的文件，就属于已提交状态。 

基本的 Git 工作流程如下：
在工作区中修改文件
将你想要下次提交的更改进行暂存
提交更新，找到暂存区的文件，将快照永久性存储到 Git 仓库

下载安装git
https://git-scm.com/downloads

 获取 Git 仓库的两种方式
将尚未进行版本控制的本地目录转换为 Git 仓库
从其它服务器克隆一个已存在的 Git 仓库

在现有目录中初始化仓库：
如果自己有一个尚未进行版本控制的项目目录，想要用 Git 来控制它，需要执行如下两个步骤：
在项目目录中，通过鼠标右键打开“Git Bash”
执行 git init 命令将当前的目录转化为 Git 仓库
git init 命令会创建一个名为 .git 的隐藏目录，这个 .git 目录就是当前项目的 Git 仓库，里面包含了初始的必要文件，这些文件是 Git 仓库的必要组成部分。

工作区中文件的 4 种状态 两大类 未被git管理 被git管理
未跟踪（Untracked） 不被 Git 所管理的文件
未修改（Unmodified）工作区中文件的内容和 Git 仓库中文件的内容保持一致
已修改（Modified）  工作区中文件的内容和 Git 仓库中文件的内容不一致
已暂存（Staged）    工作区中被修改的文件已被放到暂存区，准备将修改后的文件保存到 Git 仓库中
Git 操作的终极结果：让工作区中的文件都处于“未修改”的状态

git的基本操作
$ git config --global user.name "" ;--global 选项，那么该命令只需要运行一次，即可永久生效。 
$ git config --global user.email "";
$ git config --list --global ;查看 Git 的全局配置信息：
$ git config user.name ;查看指定的全局配置项
$ git config user.email;
$ git help config ;无需联网即可在浏览器中打开帮助手册
$ git config -h ;不想查看完整的手册，那么可以用 -h 选项获得更简明的“help”输出：
$ git init ;将当前的目录转化为 Git 仓库
$ git status ;显示文件状态
$ git status -s ;以精简的方式显示文件的状态 
$ git status --short  ; 同上
$ git add ;跟踪 添加到暂存区
$ clear ;清空页面
$ git commit -m "提交信息" ;提交更新
$ git checkout -- index.html ;撤销 危险性比较高，慎重操作
$ git add . ;将新增和修改过后的文件加入暂存区
$ git reset HEAD ;要移出的文件名称 取消暂存的文件
$ git reset HEAD . ;移出多个
$ git commit -a -m ;"提交信息" 跳过暂存区直接提交
$ git rm -f ;从git仓库和工作区同时移出对应的文件
$ git rm --cached ;只从git仓库移除，保留工作区中对应的文件
$ git log ; 查看提交历史 q退出
$ git log -n(数字); 查看最近n次的提交历史
$ git log [-n] --pretty=oneline ; 每一次提交历史放在一行
$ git log [-n] --pretty=format:"%h | %an | %ar | %s" ; 自定义格式--pretty=format:  中间的|也可以是- ， 自定义  %h提交的简写哈希值 %an作者名字 %ar作者修订日期，按多久以前的方式显示 %s提交说明
$ git reset --hard <CommitID> ;根据指定的提交ID回退到指定版本
$ git reflog --pretty=oneline ;在旧版本中展示所有的提交历史 reflog可以 log不行
$ git reset --hard <CommitID> ;再次根据最新的提交ID，跳转到指定的版本
git remote add origin ;1.将本地仓库和远程仓库进行关联，并把远程仓库命名为origin
git push -u origin master ;2.将本地仓库中的内容推送到远程的origin仓库中
git push ;第1次推送后面的推送
$ ssh-keygen -t rsa -b 4096 -C "peidesu77@gmail.com" ；生成SSh key    连续敲击 3 次回车，即可在 C:\Users\用户名文件夹\.ssh 目录中生成 id_rsa 和 id_rsa.pub 两个文件
$ ssh -T git@github.com； yes; 检测 Github 的 SSH key 是否配置成功
$ git clone 远程仓库的地址; 克隆仓库
$ git branch ；查看当前Git仓库中所有的分支列表   分支名字前面的 * 号表示当前所处的分支。
$ git branch 分支名称  ; 基于当前分支，创建一个新的分支  新分支中的代码和当前分支完全一样
$ git checkout 分支名称 ;切换到指定的分支上
$ git checkout -b 分支名称 ;分支的快速创建和切换 一般先切到master再创建和切换
$ git merge 分支名称;合并分支 基于所处的分支进行合并(先切换到目标分支再合并)
$ git branch -d 分支名称; 删除本地分支 得处于另一个分支再删
$ git branch -D 分支名称; 强制删除本地分支 没有合并的情况下
$ git push -u 远程仓库的别名(origin) 本地分支名称:远程分支名称; 将本地分支推送到远程仓库 -u表示把本地分支和远程分支进行关联，只在第一次推送的时候需要带 -u参数 
$ git push -u 远程仓库的别名(origin) 新分支名称; 将本地分支推送到远程仓库 如果希望本地分支名称和远程分支名称一致，可以简化操作
$ git remote show 远程仓库名称; 查看远程仓库中，所有的分支列表的信息
$ git checkout 远程分支的名称; (跟踪远程分支)从远程仓库中，把对应的远程分支下载到本地仓库，保存本地分支和远程分支名称相同
$ git checkout -b 本地分支名称 远程仓库名称/远程分支名称;(跟踪远程分支)从远程仓库中，把对应的远程分支下载到本地仓库，并把下载的本地分支进行重命名
$ git pull;拉取远程分支的最新代码，保持当前分支代码和远程分支代码一致
$ git push 远程仓库名称 --delete 远程分支名称;  删除远程仓库中，指定名称的远程分支

本地没有现成的git仓库
git init
git add
git commit -m
git remote add origin
git push -u origin master

本地有现成的git仓库
git remote add origin 1.将本地仓库和远程仓库进行关联，并把远程仓库命名为origin
git push -u origin master 2.将本地仓库中的内容推送到远程的origin仓库中
git push 第1次推送后面的推送

$ ssh-keygen -t rsa -b 4096 -C "peidesu77@gmail.com"
git clone 远程仓库的地址

忽略文件
一般我们总会有些文件无需纳入 Git 的管理，也不希望它们总出现在未跟踪文件列表。 在这种情况下，我们可以创建一个名为 .gitignore 的配置文件，列出要忽略的文件的匹配模式。
文件 .gitignore 的格式规范如下：
以 # 开头的是注释
以 / 结尾的是目录
以 / 开头防止递归
以 ! 开头表示取反
可以使用 glob 模式进行文件和文件夹的匹配（glob 指简化了的正则表达式）

所谓的 glob 模式是指简化了的正则表达式：
 星号 * 匹配零个或多个任意字符
 [abc] 匹配任何一个列在方括号中的字符 （此案例匹配一个 a 或匹配一个 b 或匹配一个 c）
 问号 ? 只匹配一个任意字符
 在方括号中使用短划线分隔两个字符， 表示所有在这两个字符范围内的都可以匹配（比如 [0-9] 表示匹配所有 0 到 9 的数字）
 两个星号 ** 表示匹配任意中间目录（比如 a/**/z 可以匹配 a/z 、 a/b/z 或 a/b/c/z 等）

初始化 Git 仓库的命令
 git init
查看文件状态的命令
 git status 或 git status -s
一次性将文件加入暂存区的命令
 git add .
将暂存区的文件提交到 Git 仓库的命令
 git commit -m "提交消息"

git操作具体看ppt