开源是指不仅提供程序还提供程序的源代码
闭源是只提供程序，不提供源代码

开源并不意味着完全没有限制，为了限制使用者的使用范围和保护作者的权利，每个开源项目都应该遵守开源许可协议（ Open Source License ）。
 BSD（Berkeley Software Distribution）
 Apache Licence 2.0
 GPL（GNU General Public License）
具有传染性的一种开源协议，不允许修改后和衍生的代码做为闭源的商业软件发布和销售
使用 GPL 的最著名的软件项目是：Linux
 LGPL（GNU Lesser General Public License）
 MIT（Massachusetts Institute of Technology, MIT）
是目前限制最少的协议，唯一的条件：在修改后的代码或者发行包中，必须包含原作者的许可信息
使用 MIT 的软件项目有：jquery、Node.js

专门用于免费存放开源项目源代码的网站，叫做开源项目托管平台。目前世界上比较出名的开源项目托管平台主要有以下 3 个：
Github（全球最牛的开源项目托管平台，没有之一）
Gitlab（对代码私有性支持较好，因此企业用户较多）
Gitee（又叫做码云，是国产的开源项目托管平台。访问速度快、纯中文界面、使用友好）

注意：以上 3 个开源项目托管平台，只能托管以 Git 管理的项目源代码，因此，它们的名字都以 Git 开头。

在 Github 中，你可以：
关注自己喜欢的开源项目，为其点赞打 call 
为自己喜欢的开源项目做贡献（Pull Request）
和开源项目的作者讨论 Bug 和提需求 （Issues）
把喜欢的项目复制一份作为自己的项目进行修改（Fork）
创建属于自己的开源项目
etc…

Github - 远程仓库的使用
1. 新建空白远程仓库
2. 新建空白远程仓库成功
3. 远程仓库的两种访问方式
Github 上的远程仓库，有两种访问方式，分别是 HTTPS 和 SSH。它们的区别是：
HTTPS：零配置；但是每次访问仓库时，需要重复输入 Github 的账号和密码才能访问成功
SSH：需要进行额外的配置；但是配置成功后，每次访问仓库时，不需重复输入 Github 的账号和密码

注意：在实际开发中，推荐使用 SSH 的方式访问远程仓库。

基于 HTTPS 将本地仓库上传到 Github:
本地没有现成的git仓库
git init
git add
git commit -m
git remote add origin
git push -u origin master

本地有现成的git仓库
git remote add origin 1.将本地仓库和远程仓库进行关联，并把远程仓库命名为origin
git push -u origin master 2.将本地仓库中的内容推送到远程的origin仓库中
git push 第1次推送后面的推送

SSH key:
SSH key 的作用：实现本地仓库和 Github 之间免登录的加密数据传输。
SSH key 的好处：免登录身份认证、数据加密传输。
SSH key 由两部分组成，分别是：
id_rsa（私钥文件，存放于客户端的电脑中即可）
id_rsa.pub（公钥文件，需要配置到 Github 中）

生成 SSH key
打开 Git Bash
粘贴如下的命令，并将 your_email@example.com 替换为注册 Github 账号时填写的邮箱：
 ssh-keygen -t rsa -b 4096 -C "your_email@example.com"
连续敲击 3 次回车，即可在 C:\Users\用户名文件夹\.ssh 目录中生成 id_rsa 和 id_rsa.pub 两个文件

$ ssh-keygen -t rsa -b 4096 -C "peidesu77@gmail.com"

配置 SSH key
使用记事本打开 id_rsa.pub 文件，复制里面的文本内容
在浏览器中登录 Github，点击头像 -> Settings -> SSH and GPG Keys -> New SSH key
将 id_rsa.pub 文件中的内容，粘贴到 Key 对应的文本框中
在 Title 文本框中任意填写一个名称，来标识这个 Key 从何而来

检测 Github 的 SSH key 是否配置成功
$ ssh -T git@github.com
yes

将远程仓库克隆到本地
git clone 远程仓库的地址

git分支
在进行多人协作开发的时候，为了防止互相干扰，提高协同开发的体验，建议每个开发者都基于分支进行项目功能的开发

在初始化本地 Git 仓库的时候，Git 默认已经帮我们创建了一个名字叫做 master 的分支。通常我们把这个 master 分支叫做主分支。
在实际工作中，master 主分支的作用是：用来保存和记录整个项目已完成的功能代码。
因此，不允许程序员直接在 master 分支上修改代码，因为这样做的风险太高，容易导致整个项目崩溃。

功能分支指的是专门用来开发新功能的分支，它是临时从 master 主分支上分叉出来的，当新功能开发且测试完毕后，最终需要合并到 master 主分支上，如图所示：

查看当前 Git  仓库中所有的分支列表：
注意：分支名字前面的 * 号表示当前所处的分支。

$ git branch 查看当前Git仓库中所有的分支列表   分支名字前面的 * 号表示当前所处的分支。
$ git branch 分支名称   基于当前分支，创建一个新的分支  新分支中的代码和当前分支完全一样
注意：执行完创建分支命令之后，用户当前所处的还是master分支

$ git checkout 分支名称     切换到指定分支

分支的快速创建和切换
-b 表示创建一个新分支 checkout 表示切换到刚才新建的分支上
$ git checkout -b 分支名称

合并分支
功能分支的代码开发测试完毕之后，可以使用如下的命令，将完成后的代码合并到 master 主分支上：
$ git checkout master 切换到主分支
$ git merge 分支名称;合并分支 基于所处的分支进行合并(先切换到目标分支再合并)

删除分支
当把功能分支的代码合并到 master 主分支上以后，就可以使用如下的命令，删除对应的功能分支：
$ git branch -d 分支名称; 删除分支 得处于另一个分支再删

遇到冲突时的分支合并
如果在两个不同的分支中，对同一个文件进行了不同的修改，Git 就没法干净的合并它们。 此时，我们需要打开这些包含冲突的文件然后手动解决冲突。
采用当前更改、采用传入的更改、保留双方更改、比较变更

远程分支操作
1. 将本地分支推送到远程仓库
$ git push -u 远程仓库的别名 本地分支名称:远程分支名称; -u表示把本地分支和远程分支进行关联，只在第一次推送的时候需要带 -u参数 
$ git push -u 远程仓库的别名 分支名称; 如果希望本地分支名称和远程分支名称一致，可以简化操作
注意：第一次推送分支需要带 -u 参数，此后可以直接使用 git push 推送代码到远程分支。
2. 查看远程仓库中所有的分支列表
$ git remote show 远程仓库名称; 查看远程仓库中，所有的分支列表的信息
3.跟踪分支指的是：从远程仓库中，把远程分支下载到本地仓库中。需要运行的命令如下：
$ git checkout 远程分支的名称; 从远程仓库中，把对应的远程分支下载到本地仓库，保存本地分支和远程分支名称相同
$ git checkout -b 本地分支名称 远程仓库名称/远程分支名称;从远程仓库中，把对应的远程分支下载到本地仓库，并把下载的本地分支进行重命名
4. 拉取远程分支的最新的代码
可以使用如下的命令，把远程分支最新的代码下载到本地对应的分支中
$ git pull;拉取远程分支的最新代码，保持当前分支代码和远程分支代码一致（对应分支）
5. 删除远程分支
可以使用如下的命令，删除远程仓库中指定的分支：
$ git push 远程仓库名称 --delete 远程分支名称;  删除远程仓库中，指定名称的远程分支


能够掌握 Git 中基本命令的使用
git init
git add .
git commit –m "提交消息"
git status 和 git status -s
能够使用 Github 创建和维护远程仓库
能够配置 Github 的 SSH 访问
能够将本地仓库上传到 Github
能够掌握 Git 分支的基本使用
git checkout -b 新分支名称
git push -u origin 新分支名称
git checkout 分支名称
git branch
